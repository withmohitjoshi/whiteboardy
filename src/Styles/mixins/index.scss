@use "sass:math";
@mixin baseClassGenerator($propertyName, $accessorName, $data, $unit: "") {
  @if type-of($value: $data) == "map" {
    @each $key, $value in $data {
      #{$accessorName}-#{$key} {
        #{$propertyName}: #{$value}#{$unit};
      }
    }
  } @else if type-of($value: $data) == "list" {
    @each $value in $data {
      #{$accessorName}-#{$value} {
        #{$propertyName}: #{$value}#{$unit};
      }
    }
  }
}

@mixin colorShadeGenerator($propertyName, $colorName, $color) {
  @for $index from 1 through 9 {
    &-#{$colorName}-#{$index * 100} {
      #{$propertyName}: colorDarken($color, $index * 10%);
    }
  }
}

@mixin colorClassesGenerator($propertyName, $accessorName, $data) {
  @each $colorName, $color in $data {
    #{$accessorName} {
      &-#{$colorName} {
        #{$propertyName}: $color;
      }
    }
    @if index((black, white), $color) == null {
      #{$accessorName} {
        @include colorShadeGenerator($propertyName, $colorName, $color);
      }
    }
  }
}

@mixin utilityClassesGenerator(
  $propertyName,
  $accessorName,
  $spacings,
  $directions
) {
  @each $dKey, $dValue in $directions {
    @each $sKey, $sValue in $spacings {
      @if $dValue == "default" {
        #{$accessorName}-#{$sKey} {
          #{$propertyName}: $sValue;
        }
      } @else if $dValue == "x" {
        #{$accessorName}#{$dKey}-#{$sKey} {
          #{$propertyName}-left: $sValue;
          #{$propertyName}-right: $sValue;
        }
      } @else if $dValue == "y" {
        #{$accessorName}#{$dKey}-#{$sKey} {
          #{$propertyName}-top: $sValue;
          #{$propertyName}-bottom: $sValue;
        }
      } @else {
        #{$accessorName}#{$dKey}-#{$sKey} {
          #{$propertyName}-#{$dValue}: $sValue;
        }
      }
    }
  }
}
@mixin media($breakpoint) {
  $breakpoint-value: map-get($breakpoints, $breakpoint);
  @media (min-width: $breakpoint-value) {
    @content;
  }
}
